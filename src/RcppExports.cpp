// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// AM_gibbs_parameters
Rcpp::List AM_gibbs_parameters(int niter, int burnin, int thin, int verbose);
RcppExport SEXP _AntMan_AM_gibbs_parameters(SEXP niterSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_gibbs_parameters(niter, burnin, thin, verbose));
    return rcpp_result_gen;
END_RCPP
}
// AM_poisson_gamma_prior_parameters
Rcpp::List AM_poisson_gamma_prior_parameters(double inith, double initq, double ah, double bh, double aq, double bq, double lsd);
RcppExport SEXP _AntMan_AM_poisson_gamma_prior_parameters(SEXP inithSEXP, SEXP initqSEXP, SEXP ahSEXP, SEXP bhSEXP, SEXP aqSEXP, SEXP bqSEXP, SEXP lsdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type inith(inithSEXP);
    Rcpp::traits::input_parameter< double >::type initq(initqSEXP);
    Rcpp::traits::input_parameter< double >::type ah(ahSEXP);
    Rcpp::traits::input_parameter< double >::type bh(bhSEXP);
    Rcpp::traits::input_parameter< double >::type aq(aqSEXP);
    Rcpp::traits::input_parameter< double >::type bq(bqSEXP);
    Rcpp::traits::input_parameter< double >::type lsd(lsdSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_poisson_gamma_prior_parameters(inith, initq, ah, bh, aq, bq, lsd));
    return rcpp_result_gen;
END_RCPP
}
// AM_gamma_prior_parameters
Rcpp::List AM_gamma_prior_parameters(double inith, double initq);
RcppExport SEXP _AntMan_AM_gamma_prior_parameters(SEXP inithSEXP, SEXP initqSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type inith(inithSEXP);
    Rcpp::traits::input_parameter< double >::type initq(initqSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_gamma_prior_parameters(inith, initq));
    return rcpp_result_gen;
END_RCPP
}
// AM_negative_binomial_prior_parameters
Rcpp::List AM_negative_binomial_prior_parameters(double initgamma, double R_M, double P_M, double LSDR_M, double LSDP_M, double a_R, double b_R, double a_P, double b_P, double a, double b, double lsd);
RcppExport SEXP _AntMan_AM_negative_binomial_prior_parameters(SEXP initgammaSEXP, SEXP R_MSEXP, SEXP P_MSEXP, SEXP LSDR_MSEXP, SEXP LSDP_MSEXP, SEXP a_RSEXP, SEXP b_RSEXP, SEXP a_PSEXP, SEXP b_PSEXP, SEXP aSEXP, SEXP bSEXP, SEXP lsdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type initgamma(initgammaSEXP);
    Rcpp::traits::input_parameter< double >::type R_M(R_MSEXP);
    Rcpp::traits::input_parameter< double >::type P_M(P_MSEXP);
    Rcpp::traits::input_parameter< double >::type LSDR_M(LSDR_MSEXP);
    Rcpp::traits::input_parameter< double >::type LSDP_M(LSDP_MSEXP);
    Rcpp::traits::input_parameter< double >::type a_R(a_RSEXP);
    Rcpp::traits::input_parameter< double >::type b_R(b_RSEXP);
    Rcpp::traits::input_parameter< double >::type a_P(a_PSEXP);
    Rcpp::traits::input_parameter< double >::type b_P(b_PSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type lsd(lsdSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_negative_binomial_prior_parameters(initgamma, R_M, P_M, LSDR_M, LSDP_M, a_R, b_R, a_P, b_P, a, b, lsd));
    return rcpp_result_gen;
END_RCPP
}
// AM_univariate_poisson_mixture_parameters
Rcpp::List AM_univariate_poisson_mixture_parameters(double alpha0, double beta0);
RcppExport SEXP _AntMan_AM_univariate_poisson_mixture_parameters(SEXP alpha0SEXP, SEXP beta0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< double >::type beta0(beta0SEXP);
    rcpp_result_gen = Rcpp::wrap(AM_univariate_poisson_mixture_parameters(alpha0, beta0));
    return rcpp_result_gen;
END_RCPP
}
// AM_univariate_normal_mixture_parameters
Rcpp::List AM_univariate_normal_mixture_parameters(double m0, double k0, double nu0, double sig02);
RcppExport SEXP _AntMan_AM_univariate_normal_mixture_parameters(SEXP m0SEXP, SEXP k0SEXP, SEXP nu0SEXP, SEXP sig02SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< double >::type sig02(sig02SEXP);
    rcpp_result_gen = Rcpp::wrap(AM_univariate_normal_mixture_parameters(m0, k0, nu0, sig02));
    return rcpp_result_gen;
END_RCPP
}
// AM_univariate_binomial_mixture_parameters
Rcpp::List AM_univariate_binomial_mixture_parameters(Rcpp::NumericVector a0, Rcpp::NumericVector b0, Rcpp::NumericVector mb);
RcppExport SEXP _AntMan_AM_univariate_binomial_mixture_parameters(SEXP a0SEXP, SEXP b0SEXP, SEXP mbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mb(mbSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_univariate_binomial_mixture_parameters(a0, b0, mb));
    return rcpp_result_gen;
END_RCPP
}
// AM_univariate_probit_mixture_parameters
Rcpp::List AM_univariate_probit_mixture_parameters(const Rcpp::NumericMatrix& X, const Rcpp::NumericVector& Mu, const Rcpp::NumericMatrix& Sig);
RcppExport SEXP _AntMan_AM_univariate_probit_mixture_parameters(SEXP XSEXP, SEXP MuSEXP, SEXP SigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Sig(SigSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_univariate_probit_mixture_parameters(X, Mu, Sig));
    return rcpp_result_gen;
END_RCPP
}
// AM_multivariate_binomial_mixture_parameters
Rcpp::List AM_multivariate_binomial_mixture_parameters(const arma::vec a0, const arma::vec b0, const arma::vec mb);
RcppExport SEXP _AntMan_AM_multivariate_binomial_mixture_parameters(SEXP a0SEXP, SEXP b0SEXP, SEXP mbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mb(mbSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_multivariate_binomial_mixture_parameters(a0, b0, mb));
    return rcpp_result_gen;
END_RCPP
}
// AM_multivariate_normal_mixture_parameters
Rcpp::List AM_multivariate_normal_mixture_parameters(arma::vec mu0, double ka0, unsigned int nu0, arma::mat Lam0);
RcppExport SEXP _AntMan_AM_multivariate_normal_mixture_parameters(SEXP mu0SEXP, SEXP ka0SEXP, SEXP nu0SEXP, SEXP Lam0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type ka0(ka0SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lam0(Lam0SEXP);
    rcpp_result_gen = Rcpp::wrap(AM_multivariate_normal_mixture_parameters(mu0, ka0, nu0, Lam0));
    return rcpp_result_gen;
END_RCPP
}
// AM_Univariate_Gibbs_Fit
Rcpp::List AM_Univariate_Gibbs_Fit(Rcpp::NumericVector y, Rcpp::IntegerVector initial_clustering, Rcpp::List prior_parameters, Rcpp::List mixture_parameters, Rcpp::List gibbs_parameters);
RcppExport SEXP _AntMan_AM_Univariate_Gibbs_Fit(SEXP ySEXP, SEXP initial_clusteringSEXP, SEXP prior_parametersSEXP, SEXP mixture_parametersSEXP, SEXP gibbs_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type initial_clustering(initial_clusteringSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type prior_parameters(prior_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mixture_parameters(mixture_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type gibbs_parameters(gibbs_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_Univariate_Gibbs_Fit(y, initial_clustering, prior_parameters, mixture_parameters, gibbs_parameters));
    return rcpp_result_gen;
END_RCPP
}
// AM_Multivariate_Gibbs_Fit
Rcpp::List AM_Multivariate_Gibbs_Fit(Rcpp::NumericMatrix y, Rcpp::IntegerVector initial_clustering, Rcpp::List prior_parameters, Rcpp::List mixture_parameters, Rcpp::List gibbs_parameters);
RcppExport SEXP _AntMan_AM_Multivariate_Gibbs_Fit(SEXP ySEXP, SEXP initial_clusteringSEXP, SEXP prior_parametersSEXP, SEXP mixture_parametersSEXP, SEXP gibbs_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type initial_clustering(initial_clusteringSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type prior_parameters(prior_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mixture_parameters(mixture_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type gibbs_parameters(gibbs_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_Multivariate_Gibbs_Fit(y, initial_clustering, prior_parameters, mixture_parameters, gibbs_parameters));
    return rcpp_result_gen;
END_RCPP
}
// AM_mix_components_prior_pois
Rcpp::List AM_mix_components_prior_pois(double a, double b, double lambda);
RcppExport SEXP _AntMan_AM_mix_components_prior_pois(SEXP aSEXP, SEXP bSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_mix_components_prior_pois(a, b, lambda));
    return rcpp_result_gen;
END_RCPP
}
// AM_mix_components_prior_negbin
Rcpp::List AM_mix_components_prior_negbin(double a_R, double b_R, double a_P, double b_P, double LSDR_M, double LSDP_M, double R_M, double P_M);
RcppExport SEXP _AntMan_AM_mix_components_prior_negbin(SEXP a_RSEXP, SEXP b_RSEXP, SEXP a_PSEXP, SEXP b_PSEXP, SEXP LSDR_MSEXP, SEXP LSDP_MSEXP, SEXP R_MSEXP, SEXP P_MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a_R(a_RSEXP);
    Rcpp::traits::input_parameter< double >::type b_R(b_RSEXP);
    Rcpp::traits::input_parameter< double >::type a_P(a_PSEXP);
    Rcpp::traits::input_parameter< double >::type b_P(b_PSEXP);
    Rcpp::traits::input_parameter< double >::type LSDR_M(LSDR_MSEXP);
    Rcpp::traits::input_parameter< double >::type LSDP_M(LSDP_MSEXP);
    Rcpp::traits::input_parameter< double >::type R_M(R_MSEXP);
    Rcpp::traits::input_parameter< double >::type P_M(P_MSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_mix_components_prior_negbin(a_R, b_R, a_P, b_P, LSDR_M, LSDP_M, R_M, P_M));
    return rcpp_result_gen;
END_RCPP
}
// AM_mix_components_prior_fixed
Rcpp::List AM_mix_components_prior_fixed(double Mstar);
RcppExport SEXP _AntMan_AM_mix_components_prior_fixed(SEXP MstarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Mstar(MstarSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_mix_components_prior_fixed(Mstar));
    return rcpp_result_gen;
END_RCPP
}
// AM_mix_weights_prior_gamma
Rcpp::List AM_mix_weights_prior_gamma(double a, double b, double lsd, double init);
RcppExport SEXP _AntMan_AM_mix_weights_prior_gamma(SEXP aSEXP, SEXP bSEXP, SEXP lsdSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type lsd(lsdSEXP);
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_mix_weights_prior_gamma(a, b, lsd, init));
    return rcpp_result_gen;
END_RCPP
}
// AM_mix_weights_prior_fixed
Rcpp::List AM_mix_weights_prior_fixed(double gamma);
RcppExport SEXP _AntMan_AM_mix_weights_prior_fixed(SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_mix_weights_prior_fixed(gamma));
    return rcpp_result_gen;
END_RCPP
}
// AM_mcmc_parameters
Rcpp::List AM_mcmc_parameters(unsigned int niter, unsigned int burnin, unsigned int thin, bool verbose, std::string term_output, std::string file_output, std::string filename);
RcppExport SEXP _AntMan_AM_mcmc_parameters(SEXP niterSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP verboseSEXP, SEXP term_outputSEXP, SEXP file_outputSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< std::string >::type term_output(term_outputSEXP);
    Rcpp::traits::input_parameter< std::string >::type file_output(file_outputSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_mcmc_parameters(niter, burnin, thin, verbose, term_output, file_output, filename));
    return rcpp_result_gen;
END_RCPP
}
// AM_unipois_mix_hyperparams
Rcpp::List AM_unipois_mix_hyperparams(double alpha0, double beta0);
RcppExport SEXP _AntMan_AM_unipois_mix_hyperparams(SEXP alpha0SEXP, SEXP beta0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< double >::type beta0(beta0SEXP);
    rcpp_result_gen = Rcpp::wrap(AM_unipois_mix_hyperparams(alpha0, beta0));
    return rcpp_result_gen;
END_RCPP
}
// AM_uninorm_mix_hyperparams
Rcpp::List AM_uninorm_mix_hyperparams(double m0, double k0, double nu0, double sig02);
RcppExport SEXP _AntMan_AM_uninorm_mix_hyperparams(SEXP m0SEXP, SEXP k0SEXP, SEXP nu0SEXP, SEXP sig02SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< double >::type sig02(sig02SEXP);
    rcpp_result_gen = Rcpp::wrap(AM_uninorm_mix_hyperparams(m0, k0, nu0, sig02));
    return rcpp_result_gen;
END_RCPP
}
// AM_unibin_mix_hyperparams
Rcpp::List AM_unibin_mix_hyperparams(Rcpp::NumericVector a0, Rcpp::NumericVector b0, Rcpp::NumericVector mb);
RcppExport SEXP _AntMan_AM_unibin_mix_hyperparams(SEXP a0SEXP, SEXP b0SEXP, SEXP mbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mb(mbSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_unibin_mix_hyperparams(a0, b0, mb));
    return rcpp_result_gen;
END_RCPP
}
// AM_uniprobit_mix_hyperparams
Rcpp::List AM_uniprobit_mix_hyperparams(const Rcpp::NumericMatrix& X, const Rcpp::NumericVector& Mu, const Rcpp::NumericMatrix& Sig);
RcppExport SEXP _AntMan_AM_uniprobit_mix_hyperparams(SEXP XSEXP, SEXP MuSEXP, SEXP SigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Sig(SigSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_uniprobit_mix_hyperparams(X, Mu, Sig));
    return rcpp_result_gen;
END_RCPP
}
// AM_multibin_mix_hyperparams
Rcpp::List AM_multibin_mix_hyperparams(const arma::vec a0, const arma::vec b0, const arma::vec mb);
RcppExport SEXP _AntMan_AM_multibin_mix_hyperparams(SEXP a0SEXP, SEXP b0SEXP, SEXP mbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type mb(mbSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_multibin_mix_hyperparams(a0, b0, mb));
    return rcpp_result_gen;
END_RCPP
}
// AM_multinorm_mix_hyperparams
Rcpp::List AM_multinorm_mix_hyperparams(arma::vec mu0, double ka0, unsigned int nu0, arma::mat Lam0);
RcppExport SEXP _AntMan_AM_multinorm_mix_hyperparams(SEXP mu0SEXP, SEXP ka0SEXP, SEXP nu0SEXP, SEXP Lam0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type ka0(ka0SEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lam0(Lam0SEXP);
    rcpp_result_gen = Rcpp::wrap(AM_multinorm_mix_hyperparams(mu0, ka0, nu0, Lam0));
    return rcpp_result_gen;
END_RCPP
}
// AM_mcmc_fit
Rcpp::List AM_mcmc_fit(Rcpp::RObject y, /* Not optional */ 		Rcpp::List mix_kernel_hyperparams, /* Not optional */ 		Rcpp::IntegerVector initial_clustering, int init_K, Rcpp::List mix_components_prior, Rcpp::List mix_weight_prior, Rcpp::List mcmc_parameters);
RcppExport SEXP _AntMan_AM_mcmc_fit(SEXP ySEXP, SEXP mix_kernel_hyperparamsSEXP, SEXP initial_clusteringSEXP, SEXP init_KSEXP, SEXP mix_components_priorSEXP, SEXP mix_weight_priorSEXP, SEXP mcmc_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type y(ySEXP);
    Rcpp::traits::input_parameter< /* Not optional */ 		Rcpp::List >::type mix_kernel_hyperparams(mix_kernel_hyperparamsSEXP);
    Rcpp::traits::input_parameter< /* Not optional */ 		Rcpp::IntegerVector >::type initial_clustering(initial_clusteringSEXP);
    Rcpp::traits::input_parameter< int >::type init_K(init_KSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mix_components_prior(mix_components_priorSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mix_weight_prior(mix_weight_priorSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mcmc_parameters(mcmc_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(AM_mcmc_fit(y, mix_kernel_hyperparams, initial_clustering, init_K, mix_components_prior, mix_weight_prior, mcmc_parameters));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_AntMan_AM_gibbs_parameters", (DL_FUNC) &_AntMan_AM_gibbs_parameters, 4},
    {"_AntMan_AM_poisson_gamma_prior_parameters", (DL_FUNC) &_AntMan_AM_poisson_gamma_prior_parameters, 7},
    {"_AntMan_AM_gamma_prior_parameters", (DL_FUNC) &_AntMan_AM_gamma_prior_parameters, 2},
    {"_AntMan_AM_negative_binomial_prior_parameters", (DL_FUNC) &_AntMan_AM_negative_binomial_prior_parameters, 12},
    {"_AntMan_AM_univariate_poisson_mixture_parameters", (DL_FUNC) &_AntMan_AM_univariate_poisson_mixture_parameters, 2},
    {"_AntMan_AM_univariate_normal_mixture_parameters", (DL_FUNC) &_AntMan_AM_univariate_normal_mixture_parameters, 4},
    {"_AntMan_AM_univariate_binomial_mixture_parameters", (DL_FUNC) &_AntMan_AM_univariate_binomial_mixture_parameters, 3},
    {"_AntMan_AM_univariate_probit_mixture_parameters", (DL_FUNC) &_AntMan_AM_univariate_probit_mixture_parameters, 3},
    {"_AntMan_AM_multivariate_binomial_mixture_parameters", (DL_FUNC) &_AntMan_AM_multivariate_binomial_mixture_parameters, 3},
    {"_AntMan_AM_multivariate_normal_mixture_parameters", (DL_FUNC) &_AntMan_AM_multivariate_normal_mixture_parameters, 4},
    {"_AntMan_AM_Univariate_Gibbs_Fit", (DL_FUNC) &_AntMan_AM_Univariate_Gibbs_Fit, 5},
    {"_AntMan_AM_Multivariate_Gibbs_Fit", (DL_FUNC) &_AntMan_AM_Multivariate_Gibbs_Fit, 5},
    {"_AntMan_AM_mix_components_prior_pois", (DL_FUNC) &_AntMan_AM_mix_components_prior_pois, 3},
    {"_AntMan_AM_mix_components_prior_negbin", (DL_FUNC) &_AntMan_AM_mix_components_prior_negbin, 8},
    {"_AntMan_AM_mix_components_prior_fixed", (DL_FUNC) &_AntMan_AM_mix_components_prior_fixed, 1},
    {"_AntMan_AM_mix_weights_prior_gamma", (DL_FUNC) &_AntMan_AM_mix_weights_prior_gamma, 4},
    {"_AntMan_AM_mix_weights_prior_fixed", (DL_FUNC) &_AntMan_AM_mix_weights_prior_fixed, 1},
    {"_AntMan_AM_mcmc_parameters", (DL_FUNC) &_AntMan_AM_mcmc_parameters, 7},
    {"_AntMan_AM_unipois_mix_hyperparams", (DL_FUNC) &_AntMan_AM_unipois_mix_hyperparams, 2},
    {"_AntMan_AM_uninorm_mix_hyperparams", (DL_FUNC) &_AntMan_AM_uninorm_mix_hyperparams, 4},
    {"_AntMan_AM_unibin_mix_hyperparams", (DL_FUNC) &_AntMan_AM_unibin_mix_hyperparams, 3},
    {"_AntMan_AM_uniprobit_mix_hyperparams", (DL_FUNC) &_AntMan_AM_uniprobit_mix_hyperparams, 3},
    {"_AntMan_AM_multibin_mix_hyperparams", (DL_FUNC) &_AntMan_AM_multibin_mix_hyperparams, 3},
    {"_AntMan_AM_multinorm_mix_hyperparams", (DL_FUNC) &_AntMan_AM_multinorm_mix_hyperparams, 4},
    {"_AntMan_AM_mcmc_fit", (DL_FUNC) &_AntMan_AM_mcmc_fit, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_AntMan(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
